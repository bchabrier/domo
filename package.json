{
  "name": "domoja",
  "author": "Bruno Chabrier",
  "description": "A Typescript framework for home automation",
  "version": "1.0.2",
  "private": false,
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bchabrier/domoja.git"
  },
  "keywords": [
    "home automation"
  ],
  "bugs": {
    "url": "https://github.com/bchabrier/domoja/issues"
  },
  "dependencies": {
    "@types/async": "^3.0.3",
    "@types/connect-ensure-login": "^0.1.4",
    "@types/cors": "^2.8.4",
    "@types/cron": "^1.6.1",
    "@types/express": "^4.16.0",
    "@types/mongodb": "^3.1.20",
    "@types/node": "^13.1.1",
    "@types/passport": "^1.0.0",
    "@types/passport-local": "^1.0.33",
    "@types/socket.io": "^2.1.0",
    "async": "^3.1.0",
    "basic-auth": "^2.0.0",
    "colors": "^1.3.3",
    "compression": "^1.7.3",
    "connect-ensure-login": "^0.1.1",
    "connect-flash": "^0.1.1",
    "cors": "^2.8.4",
    "cron": "^1.6.0",
    "express": "^4.16.3",
    "express-session": "^1.15.6",
    "fsmonitor": "^0.2.4",
    "mongodb": "^3.4.1",
    "morgan": "^1.9.0",
    "passport": "^0.4.0",
    "passport-local": "1.0.0",
    "passport-remember-me": "^0.0.1",
    "passport.socketio": "^3.7.0",
    "session-file-store": "^1.4.0",
    "shitty-peg": "^0.0.5",
    "socket.io": "^2.1.1",
    "tracer": "^1.0.1",
    "typescript": "^3.7.5",
    "typescript-rest": "1",
    "vm2": "^3.6.3"
  },
  "devDependencies": {
    "@types/express-session": "^1.15.11",
    "@types/mocha": "^7.0.1",
    "@types/passport-http": "^0.3.8",
    "@types/rewire": "^2.5.28",
    "coveralls": "^3.0.2",
    "mocha": "6",
    "nyc": "^15.0.0",
    "passport-headerapikey": "^1.2.1",
    "passport-http": "^0.3.0",
    "rewire": "^4.0.1",
    "ts-mocha": "^6.0.0"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "start": ": run domoja; ts-node domoja.ts",
    "start:config": ": run domoja; ts-node domoja.ts ./config",
    "test": ": run test coverage; trap 'tput cnorm' INT; nyc --extension .ts npm --scripts-prepend-node-path=auto run test:only",
    "test:only": ": run test suite once; trap 'tput cnorm' INT; ts-mocha test/**/*.ts $WATCHPARAMS --exit; tput cnorm",
    "test:watch": ": watch running test suite; trap 'tput cnorm' INT; WATCHPARAMS='-w --watch-extensions ts,yml' npm --scripts-prepend-node-path=auto run test:only",
    "watch": ": watch running domoja in demo mode; handler() { kill $PID; exit; } ; trap handler INT; while true; do npm run start$TARGET & PID=$!; inotifywait -q -e modify -e move -e create -e delete -r . @node_modules --exclude 'test|sessions|\\.git|.*\\.yml|bin|www|\\.\\#.*|.*~'; killchildren() { for p in $*; do CIDs=$(pgrep -P $p); [ -z $CIDs ] || (killchildren $CIDs; kill $p); done; }; killchildren $PID; done",
    "watch:config": ": watch running domoja; TARGET=:config npm --scripts-prepend-node-path=auto run watch",
    "report": ": generate coverage report; nyc report",
    "coverage": ": publish coverage report to coveralls; nyc report --reporter=text-lcov | coveralls",
    "swagger:force": ": run swagger generation - requires typescript-rest-swagger; swaggerGen -c ./swaggerConfig.json",
    "swagger": ": run swagger generation if needed; for f in api/*.ts; do [ ! -f api/swagger.json ] || [ $f -nt api/swagger.json ] && ( npm --scripts-prepend-node-path=auto run swagger:force; break ); done; exit 0",
    "generate:demo": ": generate demo.yml; ./tools/generate_demo",
    "publish": ": publish to npm; npm --scripts-prepend-node-path=auto run generate:demo; npm --scripts-prepend-node-path=auto run swagger; ./tools/update_readme; ./tools/publish",
    "outdated": ": check outdated packages; cur=$(pwd); for d in . core modules/*; do cd $cur/$d; pwd; yarn outdated $d; done",
    "upgrade": ": upgrade packages; cur=$(pwd); for d in . core modules/*; do cd $cur/$d; pwd; yarn upgrade $d; done"
  }
}
