{
  "name": "domoja",
  "author": "Bruno Chabrier",
  "description": "A Typescript framework for home automation",
  "version": "0.0.13",
  "private": false,
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bchabrier/domoja.git"
  },
  "keywords": [
    "home automation"
  ],
  "bugs": {
    "url": "https://github.com/bchabrier/domoja/issues"
  },
  "dependencies": {
    "@types/async": "^2.0.49",
    "@types/express": "^4.16.0",
    "@types/node": "^10.5.7",
    "async": "^2.6.1",
    "basic-auth": "^2.0.0",
    "compression": "^1.7.3",
    "connect-ensure-login": "^0.1.1",
    "connect-flash": "^0.1.1",
    "express": "^4.16.3",
    "express-session": "^1.15.6",
    "fsmonitor": "^0.2.4",
    "mongodb": "^3.1.3",
    "morgan": "^1.9.0",
    "passport": "^0.4.0",
    "passport-local": "^1.0.0",
    "passport-remember-me": "^0.0.1",
    "shitty-peg": "^0.0.5",
    "tracer": "^0.9.1",
    "vm2": "^3.6.3"
  },
  "devDependencies": {
    "@types/mocha": "^5.2.5",
    "@types/rewire": "^2.5.28",
    "coveralls": "^3.0.2",
    "cron": "^1.4.0",
    "mocha": "^5.2.0",
    "nyc": "^12.0.2",
    "rewire": "^4.0.1",
    "ts-mocha": "^2.0.0",
    "typescript": "^3.0.1"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "start": ": run domoja; ts-node domoja.ts",
    "test": ": run test coverage; nyc --extension .ts npm run test:only",
    "test:only": ": run test suite once; ts-mocha test/**/*.ts $WATCHPARAMS; tput cnorm",
    "test:watch": ": watch running test suite; WATCHPARAMS='-w --watch-extensions ts,yml' npm run test:only",
    "watch": ": watch running domoja; handler() { kill $PID; exit; } ; trap handler INT; while true; do npm run start & PID=$!; inotifywait -q -e modify -e move -e create -e delete -r . @node_modules --exclude '\\.git|.*\\.yml'; pkill -P $(pgrep -P $PID); kill $PID; done",
    "report": ": generate coverage report; nyc report",
    "coverage": ": publish coverage report to coveralls; nyc report --reporter=text-lcov | coveralls",
    "swagger:force": ": run swagger generation; swaggerGen -c ./swaggerConfig.json",
    "swagger": ": run swagger generation if needed; for f in api/*; do [ $f -nt dist/swagger.json ] && ( npm run swagger:force; break ); done; exit 0"
  }
}
