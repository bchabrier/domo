imports:
  - module: ./core/sources/demo
    source: demo
  - module: ./core/devices/httpcamera
    device: httpCamera
  - module: ./core/devices/device
    device: device
  - module: ./core/devices/sensor
    device: sensor
  - module: ./core/devices/variable
    device: variable
  - module: ./core/devices/group
    device: group
  - module: ipx800
    device: relay
  - module: proxiti
    source: astronomy
  - module: tempo
    source: tempo

sources:
  - myZibase: {
      type: demo
  }
  - myIPX800: {
      type: demo
  }
  - astronomy: {
      type: astronomy,
      location: "06030"
  }
  
  - tempo: { type: tempo }


devices:
  - aquarium:
    - controle : { type: variable, widget: "multistate:AUTO,ON,OFF:primary,secondary,danger", tags: 'aquarium-page', name: "Commande de l'aquarium"} 
    - pompes : { type: device, widget: toggle, tags: 'aquarium-page', source: myZibase, id: "ZC8", name: "Pompes aquarium" }
    - lampes : { type: device, widget: toggle, tags: 'aquarium-page', source: myZibase, id: "ZP7", name: "Lampes UV aquarium" }
    - lampes_start : { type: variable, widget: text, tags: 'aquarium', name: "Heure allumage aquarium" }
    - lampes_end : { type: variable, widget: text, tags: 'aquarium', name: "Heure extinction aquarium" }
    - pompes_start : { type: variable, widget: text, tags: 'aquarium', name: "Heure démarrage pompes aquarium" }
    - pompes_end : { type: variable, widget: text, tags: 'aquarium', name: "Heure arrêt pompes aquarium" }

  - sunset: { type: device, widget: text, tags: 'astronomy', source: astronomy, id: sunset, name: "Coucher du soleil" }
  - sunset_plus_30mn: { type: variable, widget: text, tags: 'astronomy', name: "Coucher du soleil + 30mn" }
  - sunrise: { type: device, widget: text, tags: 'astronomy', source: astronomy, id: sunrise, name: "Lever du soleil" }

  - camera_interieure: { type: httpCamera, widget: camera, tags: 'aquarium-page', video-url: /assets/imgs/demo_camera_interieure.jpg, snapshot-url: /assets/imgs/demo_camera_interieure.jpg, name: "Caméra intérieure" }
  - camera_exterieure: { type: httpCamera, widget: camera, tags: 'portails, entrée', video-url: /assets/imgs/demo_camera_exterieure.jpg, snapshot-url: /assets/imgs/demo_camera_exterieure.jpg, name: "Caméra extérieure" }
  - camera_piscine: { type: httpCamera, widget: camera:snapshot:0, tags: 'piscine', video-url: /assets/imgs/demo_camera_piscine.jpg, snapshot-url: /assets/imgs/demo_camera_piscine.jpg, name: "Caméra piscine" }
  - alarme:
    - en_route: { type: device , widget: toggle, tags: 'alarme', source: myZibase, id: A1, name: "Alarme en route" }
    - sirene_interieure: { type: variable, widget: toggle, tags: 'alarme', source: myIPX800, id: 1, name: "Sirène intérieure" }
    - sirene_exterieure: { type: variable, widget: toggle, tags: 'alarme', source: myIPX800, id: 2, name: "Sirène extérieure" }

  - garages:
    - porte: { type: sensor, widget: walkingman, tags: 'détecteurs', source: myIPX800, id: "INPUT5", name: "Porte garage du bas ou jardin", transform: "0=>OFF,1=>ON" }

  - bureau: { type: sensor, widget: walkingman, tags: 'détecteurs', source: myIPX800, id: "INPUT2", name: "Détecteur bureau", transform: "0=>OFF,1=>ON" }
  - salle_a_manger: { type: sensor, widget: walkingman, tags: 'détecteurs', source: myIPX800, id: "INPUT6", name: "Détecteur salle à manger", transform: "1=>OFF,0=>ON", camera: camera_interieure }
  - hall: { type: sensor, widget: walkingman, tags: 'détecteurs', source: myIPX800, id: "INPUT3", name: "Détecteur hall", transform: "0=>OFF,1=>ON" }
  - escalier: { type: sensor, widget: walkingman, tags: 'détecteurs', source: myIPX800, id: "INPUT4", name: "Détecteur escalier", transform: "0=>OFF,1=>ON" }
  - cuisine: { type: sensor, widget: walkingman, tags: 'détecteurs', source: myIPX800, id: "INPUT1", name: "Détecteur cuisine", transform: "0=>OFF,1=>ON" }

  - prise_camera: { type: device, widget: toggle, source: myZibase, id: "G2", name: "Prise Caméra" }




#  - hallLightTimer: {
#      type: variable, 
#      name: "Minuterie hall",
#      sensors: [ hall ],
#      #lights: [ lampe_hall ],
#      duration: 3:00,
#      off: [ sunrise, sunset ]
#  }
#  - stairLightTimer: {
#      type: variable, 
#      name: "Minuterie escalier",
#      sensors: [ hall, escalier ],
#      #lights: [ lampe_escalier ],
#      duration: 5:00,
#      on: [ 23:00, 2:00 ],
#      off: [ sunrise, sunset ],
#      priority: off
#  }
#  - kitchenLightTimer: {
#      type: variable, 
#      name: "Minuterie cuisine",
#      sensors: [ cuisine ],
#      #lights: [ lampe_table_cuisine ],
#      duration: 10:00,
#      off: [ sunrise, sunset ]
#  }      


#rooms:
#  - cuisine:
#      name: Cuisine
#  - hall:
#      name: Hall

#zones:

#scenes:
#  - init:
#    - { actions: stairLightTimer, attribute: activated, value: true }
#    - { actions: hallLightTimer, attribute: activated, value: true }
#    - { actions: kitchenLightTimer, attribute: activated, value: true }
#  - normal:
#    - minuterie-hall:
#      - { actions: hallLightTimer, attribute: duration, value: 10:00 }
#    - aquarium:
#      - { actions: aquariumTimer, attribute: activated, value: true }
#  - invitation:
#    - minuterie-hall:
#      - { actions: hallLightTimer, attribute: duration, value: 15:00 }
#    - aquarium:
#      - { actions: aquariumTimer, attribute: activated, value: false }
#      - { device: lampes_aquarium, attribute: state, value: 'ON' }
#      - { device: pompes_aquarium, attribute: state, value: 'ON' }

#actions:
#  - stairLightTimer:
#      module: ./managers/lightTimerMgr
#      class: LightTimer
#      sensors: [ hall, escalier ]
#      lights: [ lampe_escalier ]
#      duration: 5:00
#      on: [ 23:00, 2:00 ]
#      off: [ sunrise, sunset ]
#      priority: off
#      #activated: false
#  - kitchenLightTimer:
#      module: ./managers/lightTimerMgr
#      class: LightTimer
#      sensors: [ cuisine ]
#      lights: [ lampe_table_cuisine ]
#      duration: 10:00
#      off: [ sunrise, sunset ]      
#     #activated: false
#- push_notify:
#    module: ./lib/pushbullet
#    class: PushBullet
#    key: !secrets pushbullet_key

  - lampes:
    - lampe_chambre_parents: { type: device, widget: toggle, tags: 'lampes', source: myZibase, id: "ZA4", name: "Lampe Chambre parents" }
    - lampe_table_cuisine: { type: device, widget: toggle, tags: 'lampes', source: myZibase , id: "ZP4", name: "Spots Table Cuisine" }
    - lampe_preau: { type: device, widget: toggle, tags: 'lampes, entrée', source: myZibase, id: "ZA5", name: "Lampe Préau" }
    - prise_camera: { type: device, widget: toggle, source: myZibase, id: "G2", name: "Prise Caméra" }
    - lampe_rouge_haut: { type: device, widget: toggle, tags: '', source: myZibase, id: "ZO15", name: "Lampe rouge haut" }
    - lampe_rouge_bas: { type: device, widget: toggle, tags: '', source: myZibase, id: "ZC4", name: "Lampe rouge bas" }
    - lampe_escalier: { type: device, widget: toggle, tags: 'lampes', source: myZibase, id: "ZB11", name: "Lampe escalier" }
    - nb_lampes: { type: group, widget: text, tags: 'lampes', function: count, taglist: 'lampes', name: "Nombre de lampes" }
    - nb_lampes_ON: { type: group, widget: text, tags: 'lampes', function: !!js/function 'function (newValues, callback) {
          return callback(null, newValues.filter(v => v=="ON").length);
        }', taglist: 'lampes', name: "Nombre de lampes allumées" }
    - couleur : { type: variable, widget: color, tags: 'lampes-couleur', name: "Couleur du widget de lampes"} 

  - piscine:
     - controle : { type: variable, widget: "multistate:AUTO,ON,OFF:primary,secondary,danger", tags: 'piscine', name: "Programmation filtration"} 
     - filtration: { type: device, widget: toggle, tags: 'piscine', source: myZibase, id: "ZA12", name: "Filtration piscine" }
     - pieuvre: { type: device, widget: toggle, tags: 'piscine', source: myZibase, id: "ZP8", name: "Pieuvre" }
     - chlore_plus: { type: device, widget: toggle, tags: 'piscine', source: myZibase, id: "ZA14", name: "Chlore +" }
     - chlore_moins: { type: device, widget: toggle, tags: 'piscine', source: myZibase, id: "ZO14", name: "Chlore -" }
     - temperature: { type: sensor, widget: text, tags: 'piscine', source: myZibase, id: "OS439157539", attribute: "tem", name: "Température" }
     - couleur : { type: variable, widget: color, tags: 'piscine', name: "Couleur de la température"} 
     - filtration-couleur : { type: variable, widget: color, tags: 'piscine', name: "Couleur de la filtration"} 
     - filtration-icon : { type: variable, widget: text, tags: 'piscine', name: "Icône de la filtration"} 

  - petit_portail:
    - controle : { type: variable, widget: "confirm:Actionner:primary:Petit portail:Actionner le petit portail?:Partiel,Grand,Non", tags: 'portails-page, entrée', name: "Actionner le petit portail"} 
    - partiel: { type: device, widget: text, tags: 'portails', source: myZibase, id: "ZA3", name: "Petit Portail", camera: camera_exterieure }
    - grand: { type: device, widget: text, tags: 'portails', source: myZibase, id: "ZO10", name: "Petit Portail ouvert en grand", camera: camera_exterieure }
  - grand_portail:
    - controle : { type: variable, widget: "confirm:Actionner:primary:Grand portail:Actionner le grand portail?:Grand,Non", tags: 'portails-page', name: "Actionner le grand portail"} 
    - grand: { type: device, widget: text, tags: 'portails', source: myZibase, id: "ZA10", name: "Grand Portail" }
    - senseur_fermeture: { type: sensor, widget: text, tags: 'détecteurs, portails', source: myZibase, id: "ZB9", name: "Universal sensor Grand Portail", transform: !!js/function 'function (newValue) {
        return newValue == "1" ? "OFF" : "ON";
      }' }

  - tempo:
    - couleur_du_jour : { type: device, widget: tempo-color, tags: 'tempo', source: tempo, id: couleurDuJour, name: "Couleur du jour" }
    - couleur_de_demain : { type: device, widget: tempo-color, tags: 'tempo', source: tempo, id: couleurDeDemain, name: "Couleur de demain" }

scenarios:
  - demo:
    - presence_simulator:
        triggers:
          - at: startup
        actions:
          - !!js/function 'function f(callback) {
            //return callback(null);
            var self = this;
            function pgm(device) {
              var onAt = 20000 + 60000 * Math.random(); 
              var offAt = onAt + 2000 + 30000 * Math.random(); 
              self.isReleased() || setTimeout(() => { 
                self.isReleased() || self.setDeviceState(device, "0");}, onAt);
              self.isReleased() || setTimeout(() => { 
                self.isReleased() || self.setDeviceState(device, "1"); pgm(device);}, offAt);
            }
            pgm("hall");
            pgm("escalier");
            pgm("cuisine");
            pgm("bureau");
            callback(null);
           }'
    - pool-temp_simulator:
        triggers:
          - cron: */30 * * * * *
        actions:
          - !!js/function 'function pool_temp(callback) {
              let MIN = -2; // min temperature
              let MAX = 32; // max temperature

              let prev_temp = parseFloat(this.getDeviceState("piscine.temperature") || (Date.now() % ((MAX - MIN)*10))/10 + MIN, 10);

              let temp = ((prev_temp * 10) % 2 == 0)?0.2:-0.2;
              temp = temp + prev_temp;

              if (temp > MAX) temp = MAX - 0.1; 
              if (temp < MIN) temp = MIN; 

              temp = temp.toFixed(1);

              this.setDeviceState("piscine.temperature", temp, callback);
            }'
  - aquarium:
    - set_end:
      triggers:
        - at: startup
        - cron: 01 00 00 * * *
      actions:
          - { device: aquarium.lampes_end, state: 23:30 }
          - { device: aquarium.pompes_end, state: 23:59 }
    - controle:
      - init:
        triggers:
          - at: startup
        actions:
            - { device: aquarium.controle, state: "AUTO" }
      - ON:
        triggers:
          - state: aquarium.controle
        conditions:
          - {operator: =, left: this.msg.newValue, right: "ON"}
        actions:
            - { device: aquarium.lampes, state: "ON" }
            - { device: aquarium.pompes, state: "ON" }
      - OFF:
        triggers:
          - state: aquarium.controle
        conditions:
          - {operator: =, left: this.msg.newValue, right: "OFF"}
        actions:
            - { device: aquarium.lampes, state: "OFF" }
            - { device: aquarium.pompes, state: "OFF" }
    - tempo:
      - set_Bleu:
          triggers:
            - state: tempo.couleur_du_jour
            - state: sunset_plus_30mn
          conditions:
            - {operator: =, left: tempo.couleur_du_jour, right: "Bleu"}
          actions:
            - {device: aquarium.pompes_start, state: sunset}
            - {device: aquarium.lampes_start, state: sunset_plus_30mn}
      - set_others:
          triggers:
            - state: tempo.couleur_du_jour
          conditions:
            - {operator: "!=", left: tempo.couleur_du_jour, right: "Bleu"}
          actions:
            - {device: aquarium.pompes_start, state: "21:30"}
            - {device: aquarium.lampes_start, state: "22:00"}
    - lampes:
      - start:
          triggers:
            - at: aquarium.lampes_start
          conditions:
            - {operator: =, left: aquarium.controle, right: "AUTO"}
          actions:
            - { device: aquarium.lampes, state: "ON" }
      - stop:
          triggers:
            - cron: 00 30 23 * * * 
          conditions:
            - {operator: =, left: aquarium.controle, right: "AUTO"}
          actions:
            - { device: aquarium.lampes, state: "OFF" }
    - pompes:
      - start:
          triggers:
            - at: aquarium.pompes_start
          conditions:
            - {operator: =, left: aquarium.controle, right: "AUTO"}
          actions:
            - { device: aquarium.pompes, state: "ON" }
      - stop:
          triggers:
            - cron: 00 59 23 * * *
          conditions:
            - {operator: =, left: aquarium.controle, right: "AUTO"}
          actions:
            - { device: aquarium.pompes, state: "OFF" }

  - astronomy:
    - sunset_calculation:
        triggers:
          - state: sunset
        actions:
          - !!js/function 'function f(callback) {
            let sunset = new Date(this.getDeviceState("sunset"));
            this.setDeviceState("sunset_plus_30mn", new Date(sunset.getTime() + 30 * 60 * 1000), callback);
          }'   
  - test:
    - scenario_with_expr:
        triggers: 
          - state: cuisine
        conditions:
          - {operator: =, left: this.msg.newValue, right: "ON"}
        actions:
          - !!js/function 'function f(callback) {callback(null)}'      
          #- push_notify:
          #  text: "quelqu'un dans le hall !"
        






#  - hallLightTimerLightsON:
#      trigg:
#        state: hallLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#        #- !!js/function 'function f(callback) {
#        #    callback(null, this.msg.newValue == "ON");
#        #  } '
#      actions:
#        - { device: lampe_hall, attribute: state, value: 'ON' }
#        - !!js/function 'function f(callback) {console.log("Hall lights ON!"); callback(null)}'
#  - hallLightTimerLightsOFF:
#      trigg:
#        state: hallLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: OFF}
#      actions:
#        - { device: lampe_hall, attribute: state, value: 'OFF' }
#        - !!js/function 'function f(callback) {console.log("Hall lights OFF!"); callback(null)}'
#  - stairLightTimerLightsON:
#      trigg:
#        state: stairLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#      actions:
#        - { device: lampe_escalier, attribute: state, value: 'ON' }
#        - !!js/function 'function f(callback) {console.log("Stair lights ON!"); callback(null)}'
#  - stairLightTimerLightsOFF:
#      trigg:
#        state: stairLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: OFF}
#      actions:
#        - { device: lampe_escalier, attribute: state, value: 'OFF' }
#        - !!js/function 'function f(callback) {console.log("Stair lights OFF!"); callback(null)}'
#  - kitchenLightTimerLightsON:
#      trigg:
#        state: kitchenLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#      actions:
#        - { device: lampe_table_cuisine, attribute: state, value: 'ON' }
#        - !!js/function 'function f(callback) {console.log("Kitchen lights ON!"); callback(null)}'
#  - kitchenLightTimerLightsOFF:
#      trigg:
#        state: kitchenLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: OFF}
#      actions:
#        - { device: lampe_table_cuisine, attribute: state, value: 'OFF' }
#        - !!js/function 'function f(callback) {console.log("Kitchen lights OFF!"); callback(null)}'
#  - scenario1:
#      trigg: 
#        state: cuisine
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#      actions:
#        - !!js/function 'function f(callback) {callback(null)}'
#      #  - push_notify:
#      #    text: "quelqu'un dans le hall !"
#  - scenario_with_functions:
#      trigg: 
#        state: cuisine
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#      actions:
#        - notify_zibase: !!js/function 'function(callback) {
#            console.log("setevent pour cuisine !!!!!");
#            this.getSource("demo").setEvent(1, "I13");
#            callback(null);
#          }'
#        #- push_notify:
#        #  text: "quelqu'un dans le hall !"


  - lampes:
    - lampes-couleur:
      triggers:
        - at: startup
        - state: lampes.nb_lampes
      actions:
          - !!js/function 'function f(callback) {
            let nb = this.getDeviceState("lampes.nb_lampes_ON");
            let color = "lightgrey"
            if (nb == 0) color = "#33cd5f"; // green
            else color = "#ef473a";           // red
            this.setDeviceState("lampes.couleur", color, callback);
          }'
  - piscine:
    - couleur:
        triggers:
          - state: piscine.temperature
        actions:
          - !!js/function 'function f(callback) {
            let temp = parseFloat(this.getDeviceState("piscine.temperature"), 10);
            var colors = [
              [ 0, "#ef473a"],    // red
              [ 0.1, "#886aea"],  // violet
              [ 28, "#33cd5f"],   // green
              [ 30, "#33cd5f"],   // green
              [ 33, "#ef473a"],   // red
            ];

            var color;
            if (temp <= colors[0][0]) {
              color = colors[0][1]
            } else if (temp >= colors[colors.length - 1][0]) {
              color = colors[colors.length - 1][1]
            } else {
              // find closest temp interval
              for (i = 0; i < colors.length - 1; i++) {
                if (temp >= colors[i][0] && temp < colors[i + 1][0]) {
                  // apply a gradient
                  color1 = colors[i][1];
                  r1 = parseInt(color1.substr(1, 2), 16);
                  g1 = parseInt(color1.substr(3, 2), 16);
                  b1 = parseInt(color1.substr(5, 2), 16);
                  color2 = colors[i + 1][1];
                  r2 = parseInt(color2.substr(1, 2), 16);
                  g2 = parseInt(color2.substr(3, 2), 16);
                  b2 = parseInt(color2.substr(5, 2), 16);
                  ratio = (temp - colors[i][0])/(colors[i + 1][0] - colors[i][0])
                  r = Math.round(r1 + ratio * (r2-r1));
                  g = Math.round(g1 + ratio * (g2-g1));
                  b = Math.round(b1 + ratio * (b2-b1));
                  color = "#" + r.toString(16) + g.toString(16) + b.toString(16);
                }
              }
            }
            this.setDeviceState("piscine.couleur", color, callback);
          }'   
    - controle:
      - init:
        triggers:
          - at: startup
        actions:
            - { device: piscine.controle, state: "AUTO" }
      - ON:
        triggers:
          - state: piscine.controle
        conditions:
          - {operator: =, left: this.msg.newValue, right: "ON"}
        actions:
            - { device: piscine.filtration, state: "ON" }
      - OFF:
        triggers:
          - state: piscine.controle
        conditions:
          - {operator: =, left: this.msg.newValue, right: "OFF"}
        actions:
            - { device: piscine.filtration, state: "OFF" }
    - filtration-couleur:
      triggers:
        - at: startup
        - state: piscine.filtration
        - state: piscine.controle
      actions:
          - !!js/function 'function f(callback) {
            let filtration = this.getDeviceState("piscine.filtration");
            let controle = this.getDeviceState("piscine.controle");
            let color = "lightgrey"
            if (controle == "OFF") color = "#ef473a"; // red
            else if (filtration == "ON") color = "#33cd5f"; // green
            this.setDeviceState("piscine.filtration-couleur", color);

            let icon = "help"; // ?
            switch (controle) {
              case "AUTO":
                icon = "timer";
                break;
              case "ON":
                icon = "flash";
                break;
              case "OFF":
                icon = "power";
                break;
            }
            this.setDeviceState("piscine.filtration-icon", icon, callback);
          }'
  - petit_portail:
    - controle:
      - init:
        triggers:
          - at: startup
        actions:
            - { device: petit_portail.controle, state: "OFF" }
      - partiel:
        triggers:
          - state: petit_portail.controle
        conditions:
          - {operator: =, left: this.msg.newValue, right: "Partiel"}
        actions:
            - { device: petit_portail.partiel, state: "ON" }
            - { device: petit_portail.controle, state: "OFF" }
      - grand:
        triggers:
          - state: petit_portail.controle
        conditions:
          - {operator: =, left: this.msg.newValue, right: "Grand"}
        actions:
            - { device: petit_portail.grand, state: "ON" }
            - { device: petit_portail.controle, state: "OFF" }
  - grand_portail:
    - controle:
      - init:
        triggers:
          - at: startup
        actions:
            - { device: grand_portail.controle, state: "OFF" }
      - grand:
        triggers:
          - state: grand_portail.controle
        conditions:
          - {operator: =, left: this.msg.newValue, right: "Grand"}
        actions:
            - { device: grand_portail.grand, state: "ON" }
            - { device: grand_portail.controle, state: "OFF" }  

pages:
  - Home:
      title: 'Tableau de bord'
      page: home.html
      args: 
        - widgets: 
          - pool-temp:
            widget: dashboard-icon
            icon: "thermometer"
            linkPage: Piscine
            label: "Piscine"
            color: "${piscine.couleur}"
            text: "${piscine.temperature}°C"
          - pool-filtration:
            widget: dashboard-icon
            icon: "${piscine.filtration-icon}"
            linkPage: Piscine
            label: "Filtration ${piscine.filtration}"
            color: "${piscine.filtration-couleur}"
          - entrée:
            widget: dashboard-icon
            icon: ios-barcode # a valid ionic icon name
            linkPage: Entrée
            label: "Entrée"
          - aquarium:
            widget: dashboard-camera
            url: /assets/imgs/demo_dashboard_aquarium.jpg
            linkPage: Aquarium
            label: "Aquarium ${aquarium.lampes}"
          - piscine:
            widget: dashboard-camera
            url: /assets/imgs/demo_dashboard_piscine.jpg
            linkPage: Piscine
            label: Piscine
          - lights:
            widget: dashboard-icon
            icon: "bulb"
            color: "${lampes.couleur}"
            linkPage: Lampes
            label: "Lampes"
            text: "${lampes.nb_lampes_ON}/${lampes.nb_lampes}"
          - portails:
            widget: dashboard-icon
            icon: ios-barcode # a valid ionic icon name
            linkPage: Portails
            label: Portails
          - tempo:
            widget: dashboard-tempo
            couleurDuJour: "${tempo.couleur_du_jour}"
            couleurDeDemain: "${tempo.couleur_de_demain}"
            label: "Tempo"           
          - users:
            widget: dashboard-icon
            icon: people # a valid ionic icon name
            label: "Utilisateurs"
          - debug:
            widget: dashboard-icon
            icon: ios-bug # a valid ionic icon name
            linkPage: Devices
            label: "Debug"
  - Aquarium:
      title: 'Aquarium'
      page: list.html
      args: 
        - tag-list: 'aquarium-page'
        - headers: false
  - Entrée:
      title: "Entrée"
      page: list.html
      args: 
        - tag-list: 'entrée'
        - headers: false
  - Portails:
      title: "Portails"
      page: list.html
      args: 
        - tag-list: 'portails-page'
        - headers: false
  - Lampes:
      title: 'Lampes'
      page: list.html
      args: 
        - tag-list: 'lampes'
  - Devices:
      title: 'Tous les devices'
      page: list.html
      args: 
        - tag-list: 'alarme, lampes*:lampes, détecteurs, websockets, piscine, aquarium*:aquarium, portails*:portails, astronomy, tempo, *:autres'
        - image-size: tiny
  - About:
      menu-item: 'A propos'
      title: 'A propos'
      page: about.html


users:
  - id: 0 # must be unique
    name: 'demouser'
    initials: 'du'
    login: demo
    password: demo
    phone: phone_1
    macaddress: 'e4:b5:26:3a:73:ac'
    avatar: ...  
  - id: 1 # must be unique
    name: 'Luc'
    initials: 'LC'
    login: Luc
    password: demo
    phone: phone_1
    macaddress: 'e0:b5:2d:3a:76:ab'
    avatar: ...
  - id: 2 # must be unique
    name: 'Karen'
    initials: 'KC'
    login: Karen
    password: demo
    phone: phone_2
    macaddress: 'd8:c2:6a:bc:b3:2c'
    avatar: ...
  - id: 3 # must be unique
    name: 'Stéphane'
    initials: 'SC'
    login: Stéphane
    password: demo
    phone: phone_3
    macaddress: '40:6A:AE:6F:D7:45'
    avatar: ...
  - id: 4 # must be unique
    name: 'Nathalie'
    initials: 'NC'
    login: Nathalie
    password: demo
    phone: phone_4
    macaddress: 'B1:A2:E7:83:96:CB'
    avatar: ...




