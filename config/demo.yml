
imports:
  - module: ./core/sources/demo
    source: demo
  - module: ./core/devices/httpcamera
    device: httpCamera
  - module: ./core/devices/device
    device: device
  - module: ./core/devices/sensor
    device: sensor
  - module: ./core/devices/variable
    device: variable
  - module: proxiti
    source: astronomy
  - module: tempo
    source: tempo

#- module: ./devices/lightTimer
#  device: LightTimer

sources:
  - astronomy: {
      type: astronomy,
      location: "06030"
  }
  - tempo: { type: tempo }
  - demo: { type: demo }
  
devices:
  - sunset: { type: device, source: astronomy, id: sunset, name: "Coucher du soleil" }
  - sunset_plus_30mn: { type: variable, name: "Coucher du soleil + 30mn" }
  - sunrise: { type: device, source: astronomy, id: sunrise, name: "Lever du soleil" }
#- camera_interieure: { type: httpCamera, url: "http://192.168.0.5", name: "Caméra intérieure" }
  #- camera_exterieure: { type: httpCamera, url: "http://192.168.0.6", name: "Caméra extérieure" }
  - alarme:
    - en_route: { type: device , source: demo, id: A1, name: "Alarme en route" }
    - sirene_interieure: { type: device, source: demo, id: 1, name: "Sirène intérieure" }
    - sirene_exterieure: { type: device, source: demo, id: 2, name: "Sirène extérieure" }

  - piscine:
     - filtration: { type: device, source: demo, id: "ZA8", name: "Filtration piscine" }
     - pieuvre: { type: device, source: demo, id: "ZO11", name: "Pieuvre" }
     - chlore_plus: { type: device, source: demo, id: "ZA14", name: "Chlore +" }
     - chlore_moins: { type: device, source: demo, id: "ZO14", name: "Chlore -" }
     - temperature: { type: sensor, source: demo, id: "OS439157539", attribute: "tem", name: "Température" }

  - garages:
    - porte: { type: sensor, source: demo, id: "INPUT5", name: "Porte garage du bas ou jardin" }

  - bureau: { type: sensor, source: demo, id: "INPUT2", name: "Détecteur bureau"}
  - salle_a_manger: { type: sensor, source: demo, id: "INPUT6", name: "Détecteur salle à manger", camera: camera_interieure }

  - petit_portail: { type: device, source: demo, id: "ZA3", name: "Petit Portail", camera: camera_exterieure }
  - petit_portail_en_grand: { type: device, source: demo, id: "ZO10", name: "Petit Portail ouvert en grand", camera: camera_exterieure }
  - grand_portail:
     - grand_portail: { type: device, source: demo, id: "ZA10", name: "Grand Portail" }
     - senseur_fermeture: { type: sensor, source: demo, id: "ZB9", name: "Universal sensor Grand Portail", transform: !!js/function 'function (newValue) {
        return newValue == "1" ? "0" : "1";
      }' }

  - lampe_chambre_parents: { type: device, source: demo, id: "ZA4", name: "Lampe Chambre parents" }
  - lampe_hall: { type: device, source: demo, id: "ZC9", name: "Spots Hall" }
  - lampe_table_cuisine: { type: device, source: demo , id: "ZP4", name: "Spots Table Cuisine" }
  - lampe_preau: { type: device, source: demo, id: "ZA5", name: "Lampe Préau" }
  - prise_camera: { type: device, source: demo, id: "G2", name: "Prise Caméra" }
  - lampe_rouge_bas: { type: device, source: demo, id: "ZC4", name: "Lampe rouge bas" }
  - lampe_escalier: { type: device, source: demo, id: "ZB11", name: "Lampe escalier" }
  - hall: { type: sensor, source: demo, id: "INPUT3", name: "Détecteur hall" }
  - escalier: { type: sensor, source: demo, id: "INPUT4", name: "Détecteur escalier" }
  - cuisine: { type: sensor, source: demo, id: "INPUT1", name: "Détecteur cuisine" }

  - aquarium:
    - controle : { type: variable, name: "Commande de l'aquarium: ON/OFF/AUTO"} 
    - pompes : { type: device, source: demo, id: "ZC8", name: "Pompes aquarium" }
    - lampes : { type: device, source: demo, id: "ZP7", name: "Lampes UV aquarium" }
    - lampes_start : { type: variable, name: "Heure allumage aquarium" }
    - lampes_end : { type: variable, name: "Heure extinction aquarium" }
    - lampes_end : { type: variable, name: "Heure extinction aquarium" }
    - pompes_start : { type: variable, name: "Heure démarrage pompes aquarium" }
    - pompes_end : { type: variable, name: "Heure arrêt pompes aquarium" }

  - tempo:
    - couleur_du_jour : { type: device, source: tempo, id: couleurDuJour, name: "Couleur du jour" }

#  - hallLightTimer: {
#      type: LightTimer, 
#      name: "Minuterie hall",
#      sensors: [ hall ],
#      #lights: [ lampe_hall ],
#      duration: 3:00,
#      off: [ sunrise, sunset ]
#  }
#  - stairLightTimer: {
#      type: LightTimer, 
#      name: "Minuterie escalier",
#      sensors: [ hall, escalier ],
#      #lights: [ lampe_escalier ],
#      duration: 5:00,
#      on: [ 23:00, 2:00 ],
#      off: [ sunrise, sunset ],
#      priority: off
#  }
#  - kitchenLightTimer: {
#      type: LightTimer, 
#      name: "Minuterie cuisine",
#      sensors: [ cuisine ],
#      #lights: [ lampe_table_cuisine ],
#      duration: 10:00,
#      off: [ sunrise, sunset ]
#  }      
      

#rooms:
#  - cuisine:
#      name: Cuisine
#  - hall:
#      name: Hall

#zones:

#scenes:
#  - init:
#    - { actions: stairLightTimer, attribute: activated, value: true }
#    - { actions: hallLightTimer, attribute: activated, value: true }
#    - { actions: kitchenLightTimer, attribute: activated, value: true }
#  - normal:
#    - minuterie-hall:
#      - { actions: hallLightTimer, attribute: duration, value: 10:00 }
#    - aquarium:
#      - { actions: aquariumTimer, attribute: activated, value: true }
#  - invitation:
#    - minuterie-hall:
#      - { actions: hallLightTimer, attribute: duration, value: 15:00 }
#    - aquarium:
#      - { actions: aquariumTimer, attribute: activated, value: false }
#      - { device: lampes_aquarium, attribute: state, value: 'ON' }
#      - { device: pompes_aquarium, attribute: state, value: 'ON' }

#actions:
#  - stairLightTimer:
#      module: ./managers/lightTimerMgr
#      class: LightTimer
#      sensors: [ hall, escalier ]
#      lights: [ lampe_escalier ]
#      duration: 5:00
#      on: [ 23:00, 2:00 ]
#      off: [ sunrise, sunset ]
#      priority: off
#      #activated: false
#  - kitchenLightTimer:
#      module: ./managers/lightTimerMgr
#      class: LightTimer
#      sensors: [ cuisine ]
#      lights: [ lampe_table_cuisine ]
#      duration: 10:00
#      off: [ sunrise, sunset ]      
#     #activated: false
#- push_notify:
#    module: ./lib/pushbullet
#    class: PushBullet
#    key: !secrets pushbullet_key

scenarios:
  - scenario_with_expr:
      triggers: 
        - state: cuisine
      conditions:
        - {operator: =, left: this.msg.newValue, right: "ON"}
      actions:
        - !!js/function 'function f(callback) {callback(null)}'      
        #- push_notify:
        #  text: "quelqu'un dans le hall !"
  - presence_simulator:
      triggers:
        - at: startup
      actions:
       - !!js/function 'function f(callback) {
         return callback(null);
          var self = this;
          function pgm(device) {
            var onAt = 20000 + 30000 * Math.random(); 
            var offAt = onAt + 2000 + 30000 * Math.random(); 
            setTimeout(() => { self.setDeviceState(device, "ON");}, onAt);
            setTimeout(() => { self.setDeviceState(device, "OFF"); pgm(device);}, offAt);
          }
          pgm("hall");
          pgm("escalier");
          pgm("cuisine");
          pgm("bureau");
          callback(null);
         }'     
  - sunset_calculation:
      triggers:
        - state: sunset
      actions:
        - !!js/function 'function f(callback) {
          let sunset = new Date(this.getDeviceState("sunset"));
          this.setDeviceState("sunset_plus_30mn", new Date(sunset.getTime() + 30 * 60 * 1000), callback);
        }'   
  - aquarium_controle_init:
    triggers:
      - at: startup
    conditions:
      - {operator: =, left: this.msg.newValue, right: "undefined"}
    actions:
        - { device: aquarium.controle, state: "AUTO" }
  - aquarium_controle_ON:
    triggers:
      - state: aquarium.controle
    conditions:
      - {operator: =, left: this.msg.newValue, right: "ON"}
    actions:
        - { device: aquarium.lampes, state: "ON" }
        - { device: aquarium.pompes, state: "ON" }
  - aquarium_controle_OFF:
    triggers:
      - state: aquarium.controle
    conditions:
      - {operator: =, left: this.msg.newValue, right: "OFF"}
    actions:
        - { device: aquarium.lampes, state: "OFF" }
        - { device: aquarium.pompes, state: "OFF" }
  - aquarium_set_Bleu:
      triggers:
        - state: tempo.couleur_du_jour
        - state: sunset_plus_30mn
      conditions:
        - {operator: =, left: tempo.couleur_du_jour, right: "Bleu"}
      actions:
        - {device: aquarium.pompes_start, state: sunset}
        - {device: aquarium.lampes_start, state: sunset_plus_30mn}
  - aquarium_set_others:
      triggers:
        - state: tempo.couleur_du_jour
      conditions:
        - {operator: "!=", left: tempo.couleur_du_jour, right: "Bleu"}
      actions:
        - {device: aquarium.pompes_start, state: "21:30"}
        - {device: aquarium.lampes_start, state: "22:00"}
  - aquarium_lampes_start:
      triggers:
        - at: aquarium.lampes_start
      conditions:
        - {operator: =, left: aquarium.controle, right: "AUTO"}
      actions:
        - { device: aquarium.lampes, state: "ON" }
  - aquarium_pompes_start:
      triggers:
        - at: aquarium.pompes_start
      conditions:
        - {operator: =, left: aquarium.controle, right: "AUTO"}
      actions:
        - { device: aquarium.pompes, state: "ON" }
  - aquarium_lampes_stop:
      triggers:
        - cron: 00 30 23 * * * 
      conditions:
        - {operator: =, left: aquarium.controle, right: "AUTO"}
      actions:
        - { device: aquarium.lampes, state: "OFF" }
  - aquarium_pompes_stop:
      triggers:
        - cron: 00 59 23 * * *
      conditions:
        - {operator: =, left: aquarium.controle, right: "AUTO"}
      actions:
        - { device: aquarium.pompes, state: "OFF" }

        
#  - hallLightTimerLightsON:
#      trigg:
#        state: hallLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#        #- !!js/function 'function f(callback) {
#        #    callback(null, this.msg.newValue == "ON");
#        #  } '
#      actions:
#        - { device: lampe_hall, attribute: state, value: 'ON' }
#        - !!js/function 'function f(callback) {console.log("Hall lights ON!"); callback(null)}'
#  - hallLightTimerLightsOFF:
#      trigg:
#        state: hallLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: OFF}
#      actions:
#        - { device: lampe_hall, attribute: state, value: 'OFF' }
#        - !!js/function 'function f(callback) {console.log("Hall lights OFF!"); callback(null)}'
#  - stairLightTimerLightsON:
#      trigg:
#        state: stairLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#      actions:
#        - { device: lampe_escalier, attribute: state, value: 'ON' }
#        - !!js/function 'function f(callback) {console.log("Stair lights ON!"); callback(null)}'
#  - stairLightTimerLightsOFF:
#      trigg:
#        state: stairLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: OFF}
#      actions:
#        - { device: lampe_escalier, attribute: state, value: 'OFF' }
#        - !!js/function 'function f(callback) {console.log("Stair lights OFF!"); callback(null)}'
#  - kitchenLightTimerLightsON:
#      trigg:
#        state: kitchenLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#      actions:
#        - { device: lampe_table_cuisine, attribute: state, value: 'ON' }
#        - !!js/function 'function f(callback) {console.log("Kitchen lights ON!"); callback(null)}'
#  - kitchenLightTimerLightsOFF:
#      trigg:
#        state: kitchenLightTimer
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: OFF}
#      actions:
#        - { device: lampe_table_cuisine, attribute: state, value: 'OFF' }
#        - !!js/function 'function f(callback) {console.log("Kitchen lights OFF!"); callback(null)}'
#  - scenario1:
#      trigg: 
#        state: cuisine
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#      actions:
#        - !!js/function 'function f(callback) {callback(null)}'
#      #  - push_notify:
#      #    text: "quelqu'un dans le hall !"
#  - scenario_with_functions:
#      trigg: 
#        state: cuisine
#      conditions: 
#        - {operator: =, left: this.msg.newValue, right: ON}
#      actions:
#        - notify_zibase: !!js/function 'function(callback) {
#            console.log("setevent pour cuisine !!!!!");
#            this.getSource("demo").setEvent(1, "I13");
#            callback(null);
#          }'
#        #- push_notify:
#        #  text: "quelqu'un dans le hall !"


users:
  - id: 1 # must be unique
    name: 'Luc'
    initials: 'LC'
    login: Luc
    password: demo
    phone: phone_1
    macaddress: 'e0:b5:2d:3a:76:ab'
    avatar: ...
  - id: 2 # must be unique
    name: 'Karen'
    initials: 'KC'
    login: Karen
    password: demo
    phone: phone_2
    macaddress: 'd8:c2:6a:bc:b3:2c'
    avatar: ...
  - id: 3 # must be unique
    name: 'Stéphane'
    initials: 'SC'
    login: Stéphane
    password: demo
    phone: phone_3
    macaddress: '40:6A:AE:6F:D7:45'
    avatar: ...
  - id: 4 # must be unique
    name: 'Nathalie'
    initials: 'NC'
    login: Nathalie
    password: demo
    phone: phone_4
    macaddress: 'B1:A2:E7:83:96:CB'
    avatar: ...



